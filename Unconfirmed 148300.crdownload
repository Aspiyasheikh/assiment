#!/usr/bin/env python
# coding: utf-8

# #Q1. What is an Exception in python?write the difference between Exception and syntax errors.

# EXCEPTIO: It occurs during runtime and can be caught and handled using try-except blocks for graceful error management.
#     
# Syntax Errors:
# 
# Occur during code parsing.
# Prevent program execution.
# Examples: missing parentheses, mismatched indentation.
#     
# Exceptions:
# 
# Occur during program execution.
# Can be caught and handled using try-except blocks.
# Examples: dividing by zero, accessing an index that doesn't exist.    
#     

# Q2.what  happens when an exception is not handled?explain with an example

# When an exception is not handled, it leads to the termination of the program, and an error message, including details about the unhandled exception, is displayed. This abrupt termination prevents the remaining code from being executed.

# In[3]:


# This code will raise a ZeroDivisionError, and since there's no exception handling, the program will terminate.
result = 10 / 0
print("This line will not be executed.")


# Q3: which python statements are used to catch and handle exceptions?explain with an example.

# In Python, the try, except, and optionally, else and finally statements are used to catch and handle exceptions.

# In[4]:


try:
    result = 10 / 0  # This will raise a ZeroDivisionError
except ZeroDivisionError as e:
    print(f"Error: {e}")
else:
    print("This block is executed if no exception occurs.")
finally:
    print("This block is always executed, whether an exception occurs or not.")


# Q4:Explain with an example:
# a.try and else
# b.finally
# c.raise

# a .. .try and else
# 
# Example: try: result = 10 / 2; except ZeroDivisionError: print("Error"); else: print(result)
# Explanation: Try a potentially risky operation, if successful (no exception), execute the else block
#     
# b.. finally:
# 
# Example: try: result = 10 / 0; except ZeroDivisionError: print("Error"); finally: print("Always executed")
# Explanation: Execute cleanup or essential code in the finally block, regardless of whether an exception occurs.
# 
# c..raise
# 
# Example: try: raise ValueError("Custom error"); except ValueError as e: print(f"Caught: {e}")
# Explanation: Use raise to deliberately trigger an exception, caught and handled by the except block.
#     

# Q5.what are custom exceptions in python? why do we need custom exceptions? explain with an example.

# Custom exceptions in Python are user-defined exception classes that inherit from the Exception class. They are useful for creating specific and clear error messages tailored to unique situations in your code. Custom exceptions enhance code readability, modularity, and aid in debugging. Example:
# 
# python
# 

# In[5]:


class WithdrawalError(Exception):
    def __init__(self, balance, amount):
        self.balance = balance
        self.amount = amount
        self.message = f"Insufficient balance ({balance}) for withdrawal of {amount}."

def withdraw(balance, amount):
    if amount > balance:
        raise WithdrawalError(balance, amount)
    else:
        return balance - amount

try:
    new_balance = withdraw(100, 150)
except WithdrawalError as e:
    print(f"Error: {e.message}")


# Q6.create a custom exception class.use this class to handle an exception.

# In[6]:


# Custom Exception Class
class MyCustomError(Exception):
    def __init__(self, message):
        self.message = message

# Example of using the custom exception
try:
    raise MyCustomError("This is a custom exception.")
except MyCustomError as e:
    print(f"Caught an exception: {e.message}")


# In[ ]:




